/*
 * Move2Kube API
 * This is a documentation of the Move2Kube REST API. All API calls expect the `Authorization: Bearer <access-token>` HTTP header unless specified otherwise. The access token can be obtained in the same way as OAuth 2.0 using the token endpoint in the admin section. 
 *
 * The version of the OpenAPI document: v1.0.0
 * Contact: move2kube-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateProject201Response;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Project;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Create a new project in this workspace. The ID will be generated by the server.
     *
     * Create a new project in this workspace. The ID will be generated by the server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProjectTest() throws ApiException {
        String workspaceId = null;
        Project body = null;
        CreateProject201Response response = api.createProject(workspaceId, body);
        // TODO: test validations
    }

    /**
     * Delete an existing workspace.
     *
     * Delete an existing workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProjectTest() throws ApiException {
        String workspaceId = null;
        String projectId = null;
        api.deleteProject(workspaceId, projectId);
        // TODO: test validations
    }

    /**
     * Get the project with the given ID.
     *
     * Get the project with the given ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectTest() throws ApiException {
        String workspaceId = null;
        String projectId = null;
        Project response = api.getProject(workspaceId, projectId);
        // TODO: test validations
    }

    /**
     * Get all the projects you have access to in this workspace.
     *
     * Get all the projects you have access to in this workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectsTest() throws ApiException {
        String workspaceId = null;
        List<Project> response = api.getProjects(workspaceId);
        // TODO: test validations
    }

    /**
     * Update a project. The project will be created if it doesn&#39;t exist.
     *
     * Update a project. The project will be created if it doesn&#39;t exist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProjectTest() throws ApiException {
        String workspaceId = null;
        String projectId = null;
        Project body = null;
        api.updateProject(workspaceId, projectId, body);
        // TODO: test validations
    }

}
