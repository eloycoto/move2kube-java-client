/*
 * Move2Kube API
 * This is a documentation of the Move2Kube REST API. All API calls expect the `Authorization: Bearer <access-token>` HTTP header unless specified otherwise. The access token can be obtained in the same way as OAuth 2.0 using the token endpoint in the admin section. 
 *
 * The version of the OpenAPI document: v1.0.0
 * Contact: move2kube-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package dev.parodos.move2kube.api;

import dev.parodos.move2kube.ApiCallback;
import dev.parodos.move2kube.ApiClient;
import dev.parodos.move2kube.ApiException;
import dev.parodos.move2kube.ApiResponse;
import dev.parodos.move2kube.Configuration;
import dev.parodos.move2kube.Pair;
import dev.parodos.move2kube.ProgressRequestBody;
import dev.parodos.move2kube.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import dev.parodos.move2kube.client.model.CreateRole201Response;
import dev.parodos.move2kube.client.model.Error;
import dev.parodos.move2kube.client.model.Role;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class RolesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RolesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RolesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createRole
     * @param body The metadata of the role. Leave the ID blank, it will be generated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid format or validation error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization header is missing or invalid. </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Don&#39;t have authorization to create a new role. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRoleCall(Role body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRoleValidateBeforeCall(Role body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createRole(Async)");
        }

        return createRoleCall(body, _callback);

    }

    /**
     * Create a new role.
     * Create a new role.
     * @param body The metadata of the role. Leave the ID blank, it will be generated. (required)
     * @return CreateRole201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid format or validation error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization header is missing or invalid. </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Don&#39;t have authorization to create a new role. </td><td>  -  </td></tr>
     </table>
     */
    public CreateRole201Response createRole(Role body) throws ApiException {
        ApiResponse<CreateRole201Response> localVarResp = createRoleWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Create a new role.
     * Create a new role.
     * @param body The metadata of the role. Leave the ID blank, it will be generated. (required)
     * @return ApiResponse&lt;CreateRole201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid format or validation error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization header is missing or invalid. </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Don&#39;t have authorization to create a new role. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateRole201Response> createRoleWithHttpInfo(Role body) throws ApiException {
        okhttp3.Call localVarCall = createRoleValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<CreateRole201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new role. (asynchronously)
     * Create a new role.
     * @param body The metadata of the role. Leave the ID blank, it will be generated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid format or validation error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization header is missing or invalid. </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Don&#39;t have authorization to create a new role. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRoleAsync(Role body, final ApiCallback<CreateRole201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRoleValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<CreateRole201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRole
     * @param roleId ID of the role to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization header is missing or invalid. </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Don&#39;t have authorization to delete this role. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Role not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRoleCall(String roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/roles/{role-id}"
            .replace("{" + "role-id" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRoleValidateBeforeCall(String roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling deleteRole(Async)");
        }

        return deleteRoleCall(roleId, _callback);

    }

    /**
     * Delete an existing role
     * Delete an existing role.
     * @param roleId ID of the role to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization header is missing or invalid. </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Don&#39;t have authorization to delete this role. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Role not found. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRole(String roleId) throws ApiException {
        deleteRoleWithHttpInfo(roleId);
    }

    /**
     * Delete an existing role
     * Delete an existing role.
     * @param roleId ID of the role to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization header is missing or invalid. </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Don&#39;t have authorization to delete this role. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Role not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRoleWithHttpInfo(String roleId) throws ApiException {
        okhttp3.Call localVarCall = deleteRoleValidateBeforeCall(roleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an existing role (asynchronously)
     * Delete an existing role.
     * @param roleId ID of the role to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization header is missing or invalid. </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Don&#39;t have authorization to delete this role. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Role not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRoleAsync(String roleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRoleValidateBeforeCall(roleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRole
     * @param roleId ID of the role to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization header is missing or invalid. </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Don&#39;t have authorization to get this role. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Role not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRoleCall(String roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/roles/{role-id}"
            .replace("{" + "role-id" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRoleValidateBeforeCall(String roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling getRole(Async)");
        }

        return getRoleCall(roleId, _callback);

    }

    /**
     * Get the role with the given ID.
     * Get the role with the given ID.
     * @param roleId ID of the role to get. (required)
     * @return Role
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization header is missing or invalid. </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Don&#39;t have authorization to get this role. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Role not found. </td><td>  -  </td></tr>
     </table>
     */
    public Role getRole(String roleId) throws ApiException {
        ApiResponse<Role> localVarResp = getRoleWithHttpInfo(roleId);
        return localVarResp.getData();
    }

    /**
     * Get the role with the given ID.
     * Get the role with the given ID.
     * @param roleId ID of the role to get. (required)
     * @return ApiResponse&lt;Role&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization header is missing or invalid. </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Don&#39;t have authorization to get this role. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Role not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Role> getRoleWithHttpInfo(String roleId) throws ApiException {
        okhttp3.Call localVarCall = getRoleValidateBeforeCall(roleId, null);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the role with the given ID. (asynchronously)
     * Get the role with the given ID.
     * @param roleId ID of the role to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization header is missing or invalid. </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Don&#39;t have authorization to get this role. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Role not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRoleAsync(String roleId, final ApiCallback<Role> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRoleValidateBeforeCall(roleId, _callback);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRoles
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization header is missing or invalid. </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Don&#39;t have authorization to get all the roles. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRolesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRolesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getRolesCall(_callback);

    }

    /**
     * Get all the roles.
     * Get all the roles.
     * @return List&lt;Role&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization header is missing or invalid. </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Don&#39;t have authorization to get all the roles. </td><td>  -  </td></tr>
     </table>
     */
    public List<Role> getRoles() throws ApiException {
        ApiResponse<List<Role>> localVarResp = getRolesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all the roles.
     * Get all the roles.
     * @return ApiResponse&lt;List&lt;Role&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization header is missing or invalid. </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Don&#39;t have authorization to get all the roles. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Role>> getRolesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getRolesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Role>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the roles. (asynchronously)
     * Get all the roles.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization header is missing or invalid. </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Don&#39;t have authorization to get all the roles. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRolesAsync(final ApiCallback<List<Role>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRolesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Role>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRole
     * @param roleId ID of the role to update. (required)
     * @param body The metadata of the role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid format or validation error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization header is missing or invalid. </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Don&#39;t have authorization to create/update this role. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Role not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRoleCall(String roleId, Role body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/roles/{role-id}"
            .replace("{" + "role-id" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRoleValidateBeforeCall(String roleId, Role body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling updateRole(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateRole(Async)");
        }

        return updateRoleCall(roleId, body, _callback);

    }

    /**
     * Update a role. The role will be created if it doesn&#39;t exist.
     * Update a role. The role will be created if it doesn&#39;t exist.
     * @param roleId ID of the role to update. (required)
     * @param body The metadata of the role. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid format or validation error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization header is missing or invalid. </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Don&#39;t have authorization to create/update this role. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Role not found. </td><td>  -  </td></tr>
     </table>
     */
    public void updateRole(String roleId, Role body) throws ApiException {
        updateRoleWithHttpInfo(roleId, body);
    }

    /**
     * Update a role. The role will be created if it doesn&#39;t exist.
     * Update a role. The role will be created if it doesn&#39;t exist.
     * @param roleId ID of the role to update. (required)
     * @param body The metadata of the role. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid format or validation error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization header is missing or invalid. </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Don&#39;t have authorization to create/update this role. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Role not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateRoleWithHttpInfo(String roleId, Role body) throws ApiException {
        okhttp3.Call localVarCall = updateRoleValidateBeforeCall(roleId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a role. The role will be created if it doesn&#39;t exist. (asynchronously)
     * Update a role. The role will be created if it doesn&#39;t exist.
     * @param roleId ID of the role to update. (required)
     * @param body The metadata of the role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid format or validation error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization header is missing or invalid. </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Don&#39;t have authorization to create/update this role. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Role not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRoleAsync(String roleId, Role body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRoleValidateBeforeCall(roleId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
