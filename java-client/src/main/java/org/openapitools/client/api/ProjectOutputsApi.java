/*
 * Move2Kube API
 * This is a documentation of the Move2Kube REST API. All API calls expect the `Authorization: Bearer <access-token>` HTTP header unless specified otherwise. The access token can be obtained in the same way as OAuth 2.0 using the token endpoint in the admin section. 
 *
 * The version of the OpenAPI document: v1.0.0
 * Contact: move2kube-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import java.io.File;
import org.openapitools.client.model.StartTransformation202Response;
import org.openapitools.client.model.StartTransformationRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProjectOutputsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectOutputsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectOutputsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteProjectOutput
     * @param workspaceId ID of the workspace the project is in. (required)
     * @param projectId ID of the project the output is in. (required)
     * @param outputId ID of the output to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization header is missing or invalid. </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Don&#39;t have authorization to delete this project output. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace, project or output not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectOutputCall(String workspaceId, String projectId, String outputId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspace-id}/projects/{project-id}/outputs/{output-id}"
            .replace("{" + "workspace-id" + "}", localVarApiClient.escapeString(workspaceId.toString()))
            .replace("{" + "project-id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "output-id" + "}", localVarApiClient.escapeString(outputId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectOutputValidateBeforeCall(String workspaceId, String projectId, String outputId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling deleteProjectOutput(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteProjectOutput(Async)");
        }

        // verify the required parameter 'outputId' is set
        if (outputId == null) {
            throw new ApiException("Missing the required parameter 'outputId' when calling deleteProjectOutput(Async)");
        }

        return deleteProjectOutputCall(workspaceId, projectId, outputId, _callback);

    }

    /**
     * Delete the output of the project.
     * Delete the output of the project.
     * @param workspaceId ID of the workspace the project is in. (required)
     * @param projectId ID of the project the output is in. (required)
     * @param outputId ID of the output to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization header is missing or invalid. </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Don&#39;t have authorization to delete this project output. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace, project or output not found. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteProjectOutput(String workspaceId, String projectId, String outputId) throws ApiException {
        deleteProjectOutputWithHttpInfo(workspaceId, projectId, outputId);
    }

    /**
     * Delete the output of the project.
     * Delete the output of the project.
     * @param workspaceId ID of the workspace the project is in. (required)
     * @param projectId ID of the project the output is in. (required)
     * @param outputId ID of the output to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization header is missing or invalid. </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Don&#39;t have authorization to delete this project output. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace, project or output not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteProjectOutputWithHttpInfo(String workspaceId, String projectId, String outputId) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectOutputValidateBeforeCall(workspaceId, projectId, outputId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete the output of the project. (asynchronously)
     * Delete the output of the project.
     * @param workspaceId ID of the workspace the project is in. (required)
     * @param projectId ID of the project the output is in. (required)
     * @param outputId ID of the output to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization header is missing or invalid. </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Don&#39;t have authorization to delete this project output. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace, project or output not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectOutputAsync(String workspaceId, String projectId, String outputId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectOutputValidateBeforeCall(workspaceId, projectId, outputId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectOutput
     * @param workspaceId ID of the workspace the project is in. (required)
     * @param projectId ID of the project the output is in. (required)
     * @param outputId ID of the output to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The transformation is still on-going. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization header is missing or invalid. </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Don&#39;t have authorization to get this project output. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace, project or output not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectOutputCall(String workspaceId, String projectId, String outputId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspace-id}/projects/{project-id}/outputs/{output-id}"
            .replace("{" + "workspace-id" + "}", localVarApiClient.escapeString(workspaceId.toString()))
            .replace("{" + "project-id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "output-id" + "}", localVarApiClient.escapeString(outputId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectOutputValidateBeforeCall(String workspaceId, String projectId, String outputId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling getProjectOutput(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getProjectOutput(Async)");
        }

        // verify the required parameter 'outputId' is set
        if (outputId == null) {
            throw new ApiException("Missing the required parameter 'outputId' when calling getProjectOutput(Async)");
        }

        return getProjectOutputCall(workspaceId, projectId, outputId, _callback);

    }

    /**
     * Get the output of the project with the given ID.
     * Get the output of the project with the given ID.
     * @param workspaceId ID of the workspace the project is in. (required)
     * @param projectId ID of the project the output is in. (required)
     * @param outputId ID of the output to get. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The transformation is still on-going. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization header is missing or invalid. </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Don&#39;t have authorization to get this project output. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace, project or output not found. </td><td>  -  </td></tr>
     </table>
     */
    public File getProjectOutput(String workspaceId, String projectId, String outputId) throws ApiException {
        ApiResponse<File> localVarResp = getProjectOutputWithHttpInfo(workspaceId, projectId, outputId);
        return localVarResp.getData();
    }

    /**
     * Get the output of the project with the given ID.
     * Get the output of the project with the given ID.
     * @param workspaceId ID of the workspace the project is in. (required)
     * @param projectId ID of the project the output is in. (required)
     * @param outputId ID of the output to get. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The transformation is still on-going. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization header is missing or invalid. </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Don&#39;t have authorization to get this project output. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace, project or output not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getProjectOutputWithHttpInfo(String workspaceId, String projectId, String outputId) throws ApiException {
        okhttp3.Call localVarCall = getProjectOutputValidateBeforeCall(workspaceId, projectId, outputId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the output of the project with the given ID. (asynchronously)
     * Get the output of the project with the given ID.
     * @param workspaceId ID of the workspace the project is in. (required)
     * @param projectId ID of the project the output is in. (required)
     * @param outputId ID of the output to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The transformation is still on-going. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization header is missing or invalid. </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Don&#39;t have authorization to get this project output. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace, project or output not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectOutputAsync(String workspaceId, String projectId, String outputId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectOutputValidateBeforeCall(workspaceId, projectId, outputId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startTransformation
     * @param workspaceId ID of the workspace the project is in. (required)
     * @param projectId ID of the project to start the transformation for. (required)
     * @param body A plan to use for the transformation. (Not required).  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accept </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid format or validation error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization header is missing or invalid. </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Don&#39;t have authorization to start transformation for this project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace or project not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startTransformationCall(String workspaceId, String projectId, StartTransformationRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/workspaces/{workspace-id}/projects/{project-id}/outputs"
            .replace("{" + "workspace-id" + "}", localVarApiClient.escapeString(workspaceId.toString()))
            .replace("{" + "project-id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startTransformationValidateBeforeCall(String workspaceId, String projectId, StartTransformationRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling startTransformation(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling startTransformation(Async)");
        }

        return startTransformationCall(workspaceId, projectId, body, _callback);

    }

    /**
     * Start transformation for this project. Planning must be completed before this.
     * Start transformation for this project. Planning must be completed before this.
     * @param workspaceId ID of the workspace the project is in. (required)
     * @param projectId ID of the project to start the transformation for. (required)
     * @param body A plan to use for the transformation. (Not required).  (optional)
     * @return StartTransformation202Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accept </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid format or validation error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization header is missing or invalid. </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Don&#39;t have authorization to start transformation for this project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace or project not found. </td><td>  -  </td></tr>
     </table>
     */
    public StartTransformation202Response startTransformation(String workspaceId, String projectId, StartTransformationRequest body) throws ApiException {
        ApiResponse<StartTransformation202Response> localVarResp = startTransformationWithHttpInfo(workspaceId, projectId, body);
        return localVarResp.getData();
    }

    /**
     * Start transformation for this project. Planning must be completed before this.
     * Start transformation for this project. Planning must be completed before this.
     * @param workspaceId ID of the workspace the project is in. (required)
     * @param projectId ID of the project to start the transformation for. (required)
     * @param body A plan to use for the transformation. (Not required).  (optional)
     * @return ApiResponse&lt;StartTransformation202Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accept </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid format or validation error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization header is missing or invalid. </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Don&#39;t have authorization to start transformation for this project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace or project not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StartTransformation202Response> startTransformationWithHttpInfo(String workspaceId, String projectId, StartTransformationRequest body) throws ApiException {
        okhttp3.Call localVarCall = startTransformationValidateBeforeCall(workspaceId, projectId, body, null);
        Type localVarReturnType = new TypeToken<StartTransformation202Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start transformation for this project. Planning must be completed before this. (asynchronously)
     * Start transformation for this project. Planning must be completed before this.
     * @param workspaceId ID of the workspace the project is in. (required)
     * @param projectId ID of the project to start the transformation for. (required)
     * @param body A plan to use for the transformation. (Not required).  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accept </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid format or validation error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization header is missing or invalid. </td><td>  * WWW_Authenticate -  <br>  </td></tr>
        <tr><td> 403 </td><td> Don&#39;t have authorization to start transformation for this project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace or project not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startTransformationAsync(String workspaceId, String projectId, StartTransformationRequest body, final ApiCallback<StartTransformation202Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = startTransformationValidateBeforeCall(workspaceId, projectId, body, _callback);
        Type localVarReturnType = new TypeToken<StartTransformation202Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
